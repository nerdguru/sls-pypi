service: sls-pypi

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-s3-sync

provider:
  name: aws
  runtime: python3.6
  custom:
    PACKAGES_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-packages
    WEB_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-web
    COGNITO_USER_POOL: ${self:service}-${opt:stage, self:provider.stage}
    COGNITO_DOMAIN: ${self:service}-${opt:stage, self:provider.stage}
    COGNITO_IDENTITY_POOL: slspypi${opt:stage, self:provider.stage}
    TEMPLATE_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-templ
    QUERY_RESULTS_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-qres
    ATHENA_DB_NAME: ${self:service}-${opt:stage, self:provider.stage}
    ATHENA_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-cf-table
    ATHENA_TOPIC: ${self:service}-${opt:stage, self:provider.stage}-cf-topic
    WEB_TOPIC: ${self:service}-${opt:stage, self:provider.stage}-web-topic
    REMOVE_WEB_TOPIC: ${self:service}-${opt:stage, self:provider.stage}-remove-web-topic
    FOOTER_TEXT: 'Data from Github and internal usage statistics'
    HEADER_SUBTEXT: 'An alternate Python Package Index'

layers:
  UIgen:
    path: layers/uigen
    name: ${self:service}-uigen
    description: Preassembled requests, markdown2, BeautifulSoup and others
    compatibleRuntimes:
      - python3.6

# Plugin settings to sync files in the correct buckets
# Per https://github.com/k1LoW/serverless-s3-sync
custom:
  s3Sync:
    - bucketName: ${self:provider.custom.TEMPLATE_BUCKET_NAME}
      localDir: ./templates

functions:
# API Functions
  create:
    handler: packages/create.create
    events:
      - http:
          path: packages
          method: post
          cors: true

  list:
    handler: packages/list.list
    events:
      - http:
          path: packages
          method: get
          cors: true

  get:
    handler: packages/get.get
    events:
      - http:
          path: packages/{id}
          method: get
          cors: true

  update:
    handler: packages/update.update
    events:
      - http:
          path: packages/{id}
          method: put
          cors: true

  delete:
    handler: packages/delete.delete
    events:
      - http:
          path: packages/{id}
          method: delete
          cors: true

# Batch Functions
  athenaQuery:
    handler: batch/athenaQuery.athenaQuery
    role: athenaQueryRole
    timeout: 600
    environment:
      QUERY_RESULTS_BUCKET_NAME: ${self:provider.custom.QUERY_RESULTS_BUCKET_NAME}
      ATHENA_DB_NAME: ${self:provider.custom.ATHENA_DB_NAME}
      ATHENA_TABLE_NAME: ${self:provider.custom.ATHENA_TABLE_NAME}
      TIMEOUT: 600
    events:
      - sns:
          topicName: ${self:provider.custom.ATHENA_TOPIC}
          displayName: Triggers Athena queries of CloudFront logs

  listPackages:
    handler: batch/listPackages.listPackages
    role: listPackagesRole
    timeout: 600
    environment:
      PACKAGES_DYNAMODB_TABLE: ${self:provider.custom.PACKAGES_DYNAMODB_TABLE}
      ATHENA_TOPIC_ARN:
        Fn::Join:
          - ':'
          - - 'arn:aws:sns'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - ${self:provider.custom.ATHENA_TOPIC}
    events:
      # Invoke Lambda function every night at midnight
      - schedule: cron(0 0 * * ? *)

  webProcess:
    handler: batch/webProcess.webProcess
    role: webProcessRole
    timeout: 600
    environment:
      TEMPLATES_BUCKET_NAME: ${self:provider.custom.TEMPLATE_BUCKET_NAME}
      WEB_BUCKET_NAME: !ImportValue sls-pypi-certificate-BaseDomain
      PACKAGES_DYNAMODB_TABLE: ${self:provider.custom.PACKAGES_DYNAMODB_TABLE}
      WEB_DYNAMODB_TABLE: ${self:provider.custom.WEB_DYNAMODB_TABLE}
      PYPI_BUCKET_NAME: !ImportValue sls-pypi-certificate-PypiDomain
      FOOTER_TEXT: ${self:provider.custom.FOOTER_TEXT}
      HEADER_SUBTEXT: ${self:provider.custom.HEADER_SUBTEXT}
    layers:
      - {Ref: UIgenLambdaLayer}
    events:
      - sns:
          topicName: ${self:provider.custom.WEB_TOPIC}
          displayName: Triggers processing of static package web pages

  webRemove:
    handler: batch/webRemove.webRemove
    role: webRemoveRole
    timeout: 600
    environment:
      WEB_BUCKET_NAME: !ImportValue sls-pypi-certificate-WebDomain
    events:
      - sns:
          topicName: ${self:provider.custom.REMOVE_WEB_TOPIC}
          displayName: Triggers removal of static package web pages

  writeWebLogs:
    handler: batch/writeWebLogs.writeWebLogs
    role: writeWebLogsRole
    timeout: 600
    environment:
      WEB_DYNAMODB_TABLE: ${self:provider.custom.WEB_DYNAMODB_TABLE}
      WEB_TOPIC_ARN:
        Fn::Join:
          - ':'
          - - 'arn:aws:sns'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - ${self:provider.custom.WEB_TOPIC}
    events:
      - s3:
          existing: true
          bucket: ${self:provider.custom.QUERY_RESULTS_BUCKET_NAME}
          rules:
            - suffix: .csv
          event: s3:ObjectCreated:*

  dynamoPackage:
    handler: batch/dynamoPackage.dynamoPackage
    role: dynamoPackageRole
    timeout: 600
    environment:
      PACKAGES_DYNAMODB_TABLE: ${self:provider.custom.PACKAGES_DYNAMODB_TABLE}
      WEB_TOPIC_ARN:
        Fn::Join:
          - ':'
          - - 'arn:aws:sns'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - ${self:provider.custom.WEB_TOPIC}
      REMOVE_WEB_TOPIC_ARN:
        Fn::Join:
          - ':'
          - - 'arn:aws:sns'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - ${self:provider.custom.REMOVE_WEB_TOPIC}
    events:
      - stream:
        type: dynamodb
        batchSize: 1
        enabled: true
        arn:
          Fn::GetAtt: [packagesDbTable, StreamArn]

  webRoot:
    handler: batch/webRoot.webRoot
    role: webRootRole
    timeout: 600
    environment:
      TEMPLATES_BUCKET_NAME: ${self:provider.custom.TEMPLATE_BUCKET_NAME}
      WEB_BUCKET_NAME: !ImportValue sls-pypi-certificate-BaseDomain
      PACKAGES_DYNAMODB_TABLE: ${self:provider.custom.PACKAGES_DYNAMODB_TABLE}
      WEB_DYNAMODB_TABLE: ${self:provider.custom.WEB_DYNAMODB_TABLE}
      PYPI_BUCKET_NAME: !ImportValue sls-pypi-certificate-PypiDomain
      FOOTER_TEXT: ${self:provider.custom.FOOTER_TEXT}
      HEADER_SUBTEXT: ${self:provider.custom.HEADER_SUBTEXT}
    events:
      # Invoke Lambda function every night at 1a
      - schedule: cron(0 1 * * ? *)

resources:
  # CloudFormation yml for dependent services
  Resources:

    # SSM paramater for the GitHub Acess Token
    GitHubAccessTokenSSM:
      Type: AWS::SSM::Parameter
      Properties:
        Name: GitHubAccessToken
        Type: String
        Value: ${file(./github.yml):accessToken}

    # Dynamo Table for packages
    packagesDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          -
            AttributeName: package
            AttributeType: S
        KeySchema:
          -
            AttributeName: package
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.custom.PACKAGES_DYNAMODB_TABLE}

    # Dynamo Table for web logs
    webLogDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.custom.WEB_DYNAMODB_TABLE}

    # Cognito User Pool
    # Uses an enironment variable for the pool name
    CognitoUserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        UserPoolName : ${self:provider.custom.COGNITO_USER_POOL}
        UsernameAttributes :
          - email

    # Cognitio App Client
    # Uses the same app name as the user pool name
    # Note: The Ref output from the CognitoUserPool is an input here
    CognitoAppClient:
      Type: 'AWS::Cognito::UserPoolClient'
      Properties:
        ClientName: ${self:provider.custom.COGNITO_USER_POOL}
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: False
        UserPoolId: !Ref CognitoUserPool

    # Cognito Client Settings
    # Note: The Ref output from the CognitoUserPool and CognitoAppClient are inputs here
    # The ServiceToken is the ARN of the associated custom resource handler,
    # taken from the USER_POOL_CLIENT_SETTINGS environment variable
    UserPoolClientSettings:
      Type: 'Custom::CognitoUserPoolClientSettings'
      Properties:
        ServiceToken: !ImportValue sls-pypi-cf-resource-providers-UserPoolClientSettings
        UserPoolId: !Ref CognitoUserPool
        UserPoolClientId: !Ref CognitoAppClient
        SupportedIdentityProviders:
          - COGNITO
        CallbackURL: 'https://www.amazon.com'
        LogoutURL: 'https://www.google.com'
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid

    # Custom Resource for Domain
    # The ServiceToken is the ARN of the associated custom resource handler
    # taken from the USER_POOL_DOMAIN environment variable
    CognitoUserPoolDomain:
      Type: 'Custom::CognitoUserPoolDomain'
      Properties:
        ServiceToken: !ImportValue sls-pypi-cf-resource-providers-UserPoolDomain
        UserPoolId: !Ref CognitoUserPool
        Domain: ${self:provider.custom.COGNITO_DOMAIN}

    # Identity Pool
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties :
        AllowUnauthenticatedIdentities : false
        IdentityPoolName : ${self:provider.custom.COGNITO_IDENTITY_POOL}
        CognitoIdentityProviders :
          - ClientId : !Ref CognitoAppClient
            ProviderName : !GetAtt CognitoUserPool.ProviderName
            ServerSideTokenCheck : true

    # Create a role for unauthorized acces to AWS resources. Very limited access.
    # Per https://gist.github.com/singledigit/2c4d7232fa96d9e98a3de89cf6ebe7a5
    CognitoUnAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource: "*"

    # Create a role for authorized acces to AWS resources. Control what your user can access.
    # This example only allows Lambda invokation
    # Only allows users in the previously created Identity Pool
    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"

    # Assigns the roles to the Identity Pool
    IdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoAuthorizedRole.Arn
          unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

    # Internal bucket for templates
    TemplateS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.custom.TEMPLATE_BUCKET_NAME}

    # Internal bucket for Athena query results
    QresultsS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.custom.QUERY_RESULTS_BUCKET_NAME}

    # Athena database
    AthenaDB:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseInput:
          Name: ${self:provider.custom.ATHENA_DB_NAME}
          Description: Athena database for ${self:service}-${opt:stage, self:provider.stage}

    # Athena Table for CloudFront log data
    AthenaCFtable:
      DependsOn: AthenaDB
      Type: AWS::Glue::Table
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseName: !Ref AthenaDB
        TableInput:
          Name: ${self:provider.custom.ATHENA_TABLE_NAME}
          Description: Define table for CloudFront log data
          TableType: EXTERNAL_TABLE
          Parameters:
            skip.header.line.count: '2'
          StorageDescriptor:
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            Columns:
            - Name: date
              Type: date
            - Name: time
              Type: string
            - Name: location
              Type: string
            - Name: bytes
              Type: bigint
            - Name: request_ip
              Type: string
            - Name: method
              Type: string
            - Name: host
              Type: string
            - Name: uri
              Type: string
            - Name: status
              Type: int
            - Name: referrer
              Type: string
            - Name: user_agent
              Type: string
            - Name: query_string
              Type: string
            - Name: cookie
              Type: string
            - Name: result_type
              Type: string
            - Name: request_id
              Type: string
            - Name: host_header
              Type: string
            - Name: request_protocol
              Type: string
            - Name: request_bytes
              Type: bigint
            - Name: time_taken
              Type: float
            - Name: xforwarded_for
              Type: string
            - Name: ssl_protocol
              Type: string
            - Name: ssl_cipher
              Type: string
            - Name: response_result_type
              Type: string
            - Name: http_version
              Type: string
            - Name: fle_status
              Type: string
            - Name: fle_encrypted_fields
              Type: int
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Join [ '', [ 's3://',  !ImportValue sls-pypi-certificate-LogDomain, /] ]
            SerdeInfo:
              Parameters:
                field.delim: "\t"
              SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            StoredAsSubDirectories: 'false'

    # Custom role for the athenaQuery function
    athenaQueryRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: athenaQueryRole
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: athenaQueryExecution
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - athena:StartQueryExecution
                      - athena:GetQueryExecution
                    Resource: arn:aws:athena:${opt:region, self:provider.region}:*:workgroup/primary
                  - Effect: Allow
                    Action:
                      - s3:GetBucketLocation
                      - s3:ListBucket
                      - s3:ListBucketMultipartUploads
                    Resource: arn:aws:s3:::${self:provider.custom.QUERY_RESULTS_BUCKET_NAME}
                  - Effect: Allow
                    Action:
                      - s3:PutObject
                    Resource: arn:aws:s3:::${self:provider.custom.QUERY_RESULTS_BUCKET_NAME}/*
                  - Effect: Allow
                    Action:
                      - s3:GetBucketLocation
                      - s3:ListBucket
                      - s3:ListBucketMultipartUploads
                    Resource:
                      Fn::Join:
                        - ''
                        - - 'arn:aws:s3:::'
                          - !ImportValue sls-pypi-certificate-LogDomain
                  - Effect: Allow
                    Action:
                      - s3:GetObject
                      - s3:ListMultipartUploadParts
                      - s3:AbortMultipartUpload
                    Resource:
                      Fn::Join:
                        - ''
                        - - 'arn:aws:s3:::'
                          - !ImportValue sls-pypi-certificate-LogDomain
                          - '/*'
                  - Effect: Allow
                    Action:
                      - glue:GetTable
                      - glue:GetDatabase
                    Resource: arn:aws:glue:${opt:region, self:provider.region}:*:database/${self:provider.custom.ATHENA_DB_NAME}
                  - Effect: Allow
                    Action:
                      - glue:GetTable
                      - glue:GetDatabase
                    Resource: arn:aws:glue:${opt:region, self:provider.region}:*:catalog
                  - Effect: Allow
                    Action:
                      - glue:GetTable
                    Resource: arn:aws:glue:${opt:region, self:provider.region}:*:table/${self:provider.custom.ATHENA_DB_NAME}/${self:provider.custom.ATHENA_TABLE_NAME}
                  - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource:
                      - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
    # Custom role for the listPackages function
    listPackagesRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: listPackagesRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: listPackagesExecution
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.custom.PACKAGES_DYNAMODB_TABLE}"
                - Effect: Allow
                  Action:
                    - SNS:Publish
                  Resource:
                    Fn::Join:
                      - ':'
                      - - 'arn:aws:sns'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - ${self:provider.custom.ATHENA_TOPIC}
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'

    # Custom role for the webProcess function
    webProcessRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: webProcessRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: webProcessExecution
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - !ImportValue sls-pypi-certificate-PypiDomain
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.custom.PACKAGES_DYNAMODB_TABLE}"
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.custom.WEB_DYNAMODB_TABLE}"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    Fn::Join:
                      - ':'
                      - - 'arn:aws:s3::'
                        - !ImportValue sls-pypi-certificate-BaseDomain
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - !ImportValue sls-pypi-certificate-BaseDomain
                        - '/*'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:provider.custom.TEMPLATE_BUCKET_NAME}/*
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource: arn:aws:s3:::${self:provider.custom.TEMPLATE_BUCKET_NAME}/
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - ssm:GetParameter
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:ssm'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'parameter/GitHubAccessToken'
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'

    # Custom role for the webRemove function
    webRemoveRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: webRemoveRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: webProcessExecution
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:DeleteObject
                    - s3:ListBucket
                  Resource:
                    Fn::Join:
                      - ':'
                      - - 'arn:aws:s3::'
                        - !ImportValue sls-pypi-certificate-WebDomain
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'

    # Custom role for the writeWebLogs function
    writeWebLogsRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: writeWebLogsRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: writeWebLogsExecution
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.custom.WEB_DYNAMODB_TABLE}"
                - Effect: Allow
                  Action:
                    - SNS:Publish
                  Resource:
                    Fn::Join:
                      - ':'
                      - - 'arn:aws:sns'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - ${self:provider.custom.WEB_TOPIC}
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource: arn:aws:s3:::${self:provider.custom.QUERY_RESULTS_BUCKET_NAME}
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:provider.custom.QUERY_RESULTS_BUCKET_NAME}/*
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'

    # Custom role for the dynamoPackages function
    dynamoPackageRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: dynamoPackageRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: dynamoPackageExecution
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:DescribeStream
                    - dynamodb:ListStreams
                  Resource:
                    Fn::GetAtt: [packagesDbTable, StreamArn]
                - Effect: Allow
                  Action:
                    - SNS:Publish
                  Resource:
                    Fn::Join:
                      - ':'
                      - - 'arn:aws:sns'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - ${self:provider.custom.WEB_TOPIC}
                - Effect: Allow
                  Action:
                    - SNS:Publish
                  Resource:
                    Fn::Join:
                      - ':'
                      - - 'arn:aws:sns'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - ${self:provider.custom.REMOVE_WEB_TOPIC}
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'

    # Custom role for the webProcess function
    webRootRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: webRootRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: webRootExecution
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - !ImportValue sls-pypi-certificate-PypiDomain
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.custom.PACKAGES_DYNAMODB_TABLE}"
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.custom.WEB_DYNAMODB_TABLE}"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    Fn::Join:
                      - ':'
                      - - 'arn:aws:s3::'
                        - !ImportValue sls-pypi-certificate-BaseDomain
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - !ImportValue sls-pypi-certificate-BaseDomain
                        - '/*'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:provider.custom.TEMPLATE_BUCKET_NAME}/*
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource: arn:aws:s3:::${self:provider.custom.TEMPLATE_BUCKET_NAME}/
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - ssm:GetParameter
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:ssm'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'parameter/GitHubAccessToken'
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
