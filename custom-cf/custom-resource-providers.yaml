---
AWSTemplateFormatVersion: '2010-09-09'
Description: Custom CFN Certificate Provider with DNS validation support
Parameters:
  ResourceBucketName:
    Type: String
    Default: ''
  CFNCustomProviderZipFileName:
    Type: String
    Default: 'cfn-certificate-provider-0.2.4.zip'
  UPCustomProviderZipFileName:
    Type: String
    Default: 'cfn-cognito-user-pools.zip'
Resources:
  # First set of resources sets up the certificate provider
  LambdaPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - LambdaRole
    Properties:
      PolicyName: CFNCertificateDomainResourceRecordProvider
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - acm:RequestCertificate
              - acm:DescribeCertificate
              - acm:UpdateCertificateOptions
              - acm:DeleteCertificate
            Resource:
            - '*'
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider'
          - Effect: Allow
            Action:
              - logs:*
            Resource: arn:aws:logs:*:*:*
      Roles:
        - !Ref 'LambdaRole'
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  CFNCustomProvider:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      Description: CFN Certificate Domain Resource Record Provider
      Code:
        S3Bucket: !Ref ResourceBucketName
        S3Key: !Ref 'CFNCustomProviderZipFileName'
      FunctionName: binxio-cfn-certificate-provider
      Handler: provider.handler
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: python3.6
      Timeout: 300

  # Next set of resources sets up cognito
  LambdaForCloudFormation:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaForCF
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        -
          PolicyName: WriteCloudWatchLogs
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        -
          PolicyName: UpdateUserPoolClient
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action: 'cognito-idp:UpdateUserPoolClient'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
        -
          PolicyName: ManageUserPoolDomain
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action: 'cognito-idp:CreateUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DeleteUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DescribeUserPoolDomain'
                Resource: '*'
        -
          PolicyName: InvokeLambdaFunction
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: 'arn:aws:lambda:*:*:function:*'
  CloudFormationSendResponse:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CloudFormationSendResponse
      Runtime: nodejs8.10
      Code:
        S3Bucket: !Ref ResourceBucketName
        S3Key: !Ref 'UPCustomProviderZipFileName'
      Handler: sendResponse.handler
      Role: !GetAtt LambdaForCloudFormation.Arn
  CloudFormationCognitoUserPoolClientSettings:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CloudFormationCognitoUserPoolClientSettings
      Runtime: nodejs8.10
      Code:
        S3Bucket: !Ref ResourceBucketName
        S3Key: !Ref 'UPCustomProviderZipFileName'
      Handler: userPoolClientSettings.handler
      Role: !GetAtt LambdaForCloudFormation.Arn
    DependsOn: CloudFormationSendResponse
  CloudFormationCognitoUserPoolDomain:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CloudFormationCognitoUserPoolDomain
      Runtime: nodejs8.10
      Code:
        S3Bucket: !Ref ResourceBucketName
        S3Key: !Ref 'UPCustomProviderZipFileName'
      Handler: userPoolDomain.handler
      Role: !GetAtt LambdaForCloudFormation.Arn
    DependsOn: CloudFormationSendResponse
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: UserPool
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: UserPoolClient
      GenerateSecret: true
      UserPoolId: !Ref UserPool
  UserPoolClientSettings:
    Type: 'Custom::CognitoUserPoolClientSettings'
    Properties:
      ServiceToken: !GetAtt CloudFormationCognitoUserPoolClientSettings.Arn
      UserPoolId: !Ref UserPool
      UserPoolClientId: !Ref UserPoolClient
      SupportedIdentityProviders:
        - COGNITO
      CallbackURL: 'https://www.amazon.com'
      LogoutURL: 'https://www.google.com'
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
  UserPoolDomain:
    Type: 'Custom::CognitoUserPoolDomain'
    Properties:
      ServiceToken: !GetAtt CloudFormationCognitoUserPoolDomain.Arn
      UserPoolId: !Ref UserPool
      Domain: 'csco-domain'

# Output the arn's used as service tokens so they can be used by serverless.yml
Outputs:
  UserPoolClientSettings:
    Description: Service token
    Value: !GetAtt CloudFormationCognitoUserPoolClientSettings.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientSettings"
  UserPoolDomain:
    Description: Service token
    Value: !GetAtt CloudFormationCognitoUserPoolDomain.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolDomain"
