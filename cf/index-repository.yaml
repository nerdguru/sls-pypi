AWSTemplateFormatVersion: 2010-09-09
Mappings:
  RegionMap:
    us-east-1:
      WebsiteEndpoint: s3-website-us-east-1.amazonaws.com
      HostedZoneId: Z3AQBSTGFYJSTF
    us-west-2:
      WebsiteEndpoint: s3-website-us-west-2.amazonaws.com
      HostedZoneId: Z3BJ6K6RIION7M
    us-west-1:
      WebsiteEndpoint: s3-website-us-west-1.amazonaws.com
      HostedZoneId: Z2F56UZL2M1ACD
    eu-west-1:
      WebsiteEndpoint: s3-website-eu-west-1.amazonaws.com
      HostedZoneId: Z1BKCTXD74EZPE
    eu-central-1:
      WebsiteEndpoint: s3-website.eu-central-1.amazonaws.com
      HostedZoneId: Z21DNDUVLTQW6Q
    ap-southeast-1:
      WebsiteEndpoint: s3-website-ap-southeast-1.amazonaws.com
      HostedZoneId: Z3O0J2DXBE1FTB
    ap-northeast-1:
      WebsiteEndpoint: s3-website-ap-northeast-1.amazonaws.com
      HostedZoneId: Z2M4EHUR26P7ZW
    ap-southeast-2:
      WebsiteEndpoint: s3-website-ap-southeast-2.amazonaws.com
      HostedZoneId: Z1WCIGYICN2BYD
    ap-northeast-2:
      WebsiteEndpoint: s3-website.ap-northeast-2.amazonaws.com
      HostedZoneId: Z3W03O7B5YMIYP
    sa-east-1:
      WebsiteEndpoint: s3-website-sa-east-1.amazonaws.com
      HostedZoneId: Z7KQH4QJS55SO
Resources:
  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !ImportValue sls-pypi-certificate-LogDomain
  PyPiS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !ImportValue sls-pypi-certificate-PypiDomain
      WebsiteConfiguration:
        IndexDocument: index.html
  PyPiS3BucketBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref PyPiS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref PyPiS3Bucket
                - /*
            Principal: '*'
            Condition:
              IpAddress:
                'aws:SourceIp':
                  - 52.84.0.0/15
                  - 54.182.0.0/16
                  - 54.192.0.0/16
                  - 54.230.0.0/16
                  - 54.239.128.0/18
                  - 54.239.192.0/19
                  - 54.240.128.0/18
                  - 204.246.164.0/22
                  - 204.246.168.0/22
                  - 204.246.174.0/23
                  - 204.246.176.0/20
                  - 205.251.254.0/24
                  - 205.251.252.0/23
                  - 205.251.250.0/23
                  - 205.251.249.0/24
                  - 205.251.192.0/19
                  - 216.137.32.0/19
  PyPiCloudfrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !ImportValue sls-pypi-certificate-PypiDomain
        Comment: Created by s3pypi
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: 'true'
          TargetOriginId: PyPiS3BucketOrigin
          ViewerProtocolPolicy: https-only
        Enabled: 'true'
        Logging:
          Bucket: !Join
            - '.'
            - - !Ref LoggingBucket
              - 's3.amazonaws.com'
        Origins:
          - CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
            DomainName: !Join
              - .
              - - !Ref PyPiS3Bucket
                - !FindInMap
                  - RegionMap
                  - !Ref 'AWS::Region'
                  - WebsiteEndpoint
            Id: PyPiS3BucketOrigin
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !ImportValue sls-pypi-certificate-CertificateArn
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
  DNScname:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt PyPiCloudfrontDistribution.DomainName
        HostedZoneId: 'Z2FDTNDATAQYW2'
      Comment: 'Setting up the friendly CNAME alias for the CloudFormation Dist'
      HostedZoneId: !ImportValue sls-pypi-certificate-HostedZoneId
      Name: !ImportValue sls-pypi-certificate-PypiDomain
      Type: 'A'

  PublishS3PyPiPackages:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for updating packages in S3
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowUserToSeeBucketListInTheConsole
            Action:
              - 's3:ListAllMyBuckets'
              - 's3:GetBucketLocation'
            Effect: Allow
            Resource:
              - 'arn:aws:s3:::*'
          - Sid: AllowPutActionInBucket
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:ListBucket'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref PyPiS3Bucket
                  - /
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref PyPiS3Bucket
                  - /*

  # Internal bucket for templates
  TemplateS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !ImportValue sls-pypi-certificate-TemplatesDomain

  # S3 bucket per https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-s3.html
  WebS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !ImportValue sls-pypi-certificate-WebDomain
      AccessControl: PublicRead
      WebsiteConfiguration:
        RedirectAllRequestsTo :
           HostName: !ImportValue sls-pypi-certificate-BaseDomain

  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref WebS3Bucket
                - /*
      Bucket: !Ref WebS3Bucket

  WebDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !FindInMap
              - RegionMap
              - !Ref 'AWS::Region'
              - WebsiteEndpoint
        HostedZoneId: !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - HostedZoneId
      Comment: 'Setting up the friendly CNAME alias for the web bucket'
      HostedZoneId: !ImportValue sls-pypi-certificate-HostedZoneId
      Name: !ImportValue sls-pypi-certificate-WebDomain
      Type: 'A'

  BaseS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !ImportValue sls-pypi-certificate-BaseDomain
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  BaseBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref BaseS3Bucket
                - /*
      Bucket: !Ref BaseS3Bucket

  BaseDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !FindInMap
              - RegionMap
              - !Ref 'AWS::Region'
              - WebsiteEndpoint
        HostedZoneId: !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - HostedZoneId
      Comment: 'Setting up the friendly CNAME alias for the web bucket'
      HostedZoneId: !ImportValue sls-pypi-certificate-HostedZoneId
      Name: !ImportValue sls-pypi-certificate-BaseDomain
      Type: 'A'
